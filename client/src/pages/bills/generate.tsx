import { useState, useEffect } from "react";
import { useLocation } from "wouter";
import { useQuery, useMutation } from "@tanstack/react-query";
import { zodResolver } from "@hookform/resolvers/zod";
import { useForm } from "react-hook-form";
import { z } from "zod";
import { format } from "date-fns";
import { CalendarIcon, Loader2, PlusCircle, Trash } from "lucide-react";
import { cn } from "@/lib/utils";
import { queryClient, apiRequest } from "@/lib/queryClient";
import { useToast } from "@/hooks/use-toast";

import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import {
  Form,
  FormControl,
  FormDescription,
  FormField,
  FormItem,
  FormLabel,
  FormMessage,
} from "@/components/ui/form";
import { Input } from "@/components/ui/input";
import { Textarea } from "@/components/ui/textarea";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import { Calendar } from "@/components/ui/calendar";
import {
  Popover,
  PopoverContent,
  PopoverTrigger,
} from "@/components/ui/popover";
import { Checkbox } from "@/components/ui/checkbox";
import { insertBillSchema, InsertBill, Project, ShipDuty } from "@shared/schema";

// Types for ship duty details to be included in the bill
interface ShipDutyDetail {
  id: number;
  dutyDate: string;
  employeeId: number;
  employeeName?: string; // Will be populated client-side
  vesselName: string;
  lighterName?: string;
  dutyHours: number;
  salaryRate: number;
  conveyanceAmount: number;
  amount: number; // Calculated as dutyHours * salaryRate
}

// Extend the bill schema with validation
const billFormSchema = insertBillSchema.extend({
  billDate: z.coerce.date(),
  startDate: z.coerce.date(),
  endDate: z.coerce.date(),
  totalDutyAmount: z.coerce.number().min(0, "Total duty amount must be non-negative"),
  totalConveyance: z.coerce.number().min(0, "Total conveyance must be non-negative"),
  vatPercentage: z.coerce.number().min(0, "VAT percentage must be non-negative").max(100, "VAT percentage must be max 100"),
  aitPercentage: z.coerce.number().min(0, "AIT percentage must be non-negative").max(100, "AIT percentage must be max 100"),
  vatAmount: z.coerce.number().min(0, "VAT amount must be non-negative"),
  aitAmount: z.coerce.number().min(0, "AIT amount must be non-negative"),
  grossAmount: z.coerce.number().min(0, "Gross amount must be non-negative"),
  netPayable: z.coerce.number().min(0, "Net payable must be non-negative"),
  generatedBy: z.string().min(1, "Generated by is required"),
});

type BillFormValues = z.infer<typeof billFormSchema>;

export default function GenerateBillPage() {
  const [, navigate] = useLocation();
  const { toast } = useToast();
  const [selectedProjectId, setSelectedProjectId] = useState<number | null>(null);
  const [selectedDuties, setSelectedDuties] = useState<ShipDutyDetail[]>([]);
  const [filteredDuties, setFilteredDuties] = useState<ShipDuty[]>([]);
  
  // Get user info for generated by field
  const { data: userData } = useQuery({
    queryKey: ["/api/auth/me"],
    onError: () => {
      // Just silently fail - the auth middleware will redirect if needed
    },
  });

  // Fetch projects for dropdown
  const { data: projects, isLoading: isLoadingProjects } = useQuery<Project[]>({
    queryKey: ["/api/projects"],
    onError: (error) => {
      toast({
        title: "Error loading projects",
        description: error.message,
        variant: "destructive",
      });
    },
  });

  // Fetch all ship duties
  const { data: shipDuties, isLoading: isLoadingDuties } = useQuery<ShipDuty[]>({
    queryKey: ["/api/ship-duties"],
    onError: (error) => {
      toast({
        title: "Error loading ship duties",
        description: error.message,
        variant: "destructive",
      });
    },
  });

  // Fetch employees for name mapping
  const { data: employees } = useQuery({
    queryKey: ["/api/employees"],
    onError: (error) => {
      toast({
        title: "Error loading employees",
        description: error.message,
        variant: "destructive",
      });
    }
  });

  // Initialize form with current date
  const form = useForm<BillFormValues>({
    resolver: zodResolver(billFormSchema),
    defaultValues: {
      billNumber: generateBillNumber(),
      projectId: undefined,
      clientName: "",
      billDate: new Date(),
      startDate: new Date(),
      endDate: new Date(),
      totalDutyAmount: 0,
      totalConveyance: 0,
      vatPercentage: 0,
      aitPercentage: 0,
      vatAmount: 0,
      aitAmount: 0,
      grossAmount: 0,
      netPayable: 0,
      status: "Draft",
      paidAmount: 0,
      billDetails: "[]",
      remarks: "",
      generatedBy: userData?.firstName && userData?.lastName 
        ? `${userData.firstName} ${userData.lastName}`
        : "",
    },
  });

  // Update generatedBy when user data is loaded
  useEffect(() => {
    if (userData?.firstName && userData?.lastName) {
      form.setValue("generatedBy", `${userData.firstName} ${userData.lastName}`);
    }
  }, [userData, form]);

  // Update filtered duties when project is selected
  useEffect(() => {
    if (selectedProjectId && shipDuties) {
      const duties = shipDuties.filter(duty => duty.projectId === selectedProjectId);
      setFilteredDuties(duties);
    } else {
      setFilteredDuties([]);
    }
  }, [selectedProjectId, shipDuties]);

  // Calculate bill amounts whenever selected duties change
  useEffect(() => {
    if (selectedDuties.length > 0) {
      // Calculate total duty amount (sum of all duty amounts)
      const totalDutyAmount = selectedDuties.reduce((total, duty) => total + duty.amount, 0);
      
      // Calculate total conveyance
      const totalConveyance = selectedDuties.reduce((total, duty) => total + Number(duty.conveyanceAmount), 0);
      
      // Get VAT and AIT percentages from the form
      const vatPercentage = form.getValues("vatPercentage") || 0;
      const aitPercentage = form.getValues("aitPercentage") || 0;
      
      // Calculate VAT and AIT amounts
      const vatAmount = (totalDutyAmount * vatPercentage) / 100;
      const aitAmount = (totalDutyAmount * aitPercentage) / 100;
      
      // Calculate gross amount (total duty + VAT)
      const grossAmount = totalDutyAmount + vatAmount;
      
      // Calculate net payable (gross - AIT)
      const netPayable = grossAmount - aitAmount;
      
      // Update form values
      form.setValue("totalDutyAmount", totalDutyAmount);
      form.setValue("totalConveyance", totalConveyance);
      form.setValue("vatAmount", vatAmount);
      form.setValue("aitAmount", aitAmount);
      form.setValue("grossAmount", grossAmount);
      form.setValue("netPayable", netPayable);
      form.setValue("billDetails", JSON.stringify(selectedDuties));
    } else {
      // Reset values if no duties are selected
      form.setValue("totalDutyAmount", 0);
      form.setValue("totalConveyance", 0);
      form.setValue("vatAmount", 0);
      form.setValue("aitAmount", 0);
      form.setValue("grossAmount", 0);
      form.setValue("netPayable", 0);
      form.setValue("billDetails", "[]");
    }
  }, [selectedDuties, form]);

  // Handle VAT and AIT percentage changes
  const recalculateAmounts = () => {
    const totalDutyAmount = form.getValues("totalDutyAmount") || 0;
    const vatPercentage = form.getValues("vatPercentage") || 0;
    const aitPercentage = form.getValues("aitPercentage") || 0;
    
    const vatAmount = (totalDutyAmount * vatPercentage) / 100;
    const aitAmount = (totalDutyAmount * aitPercentage) / 100;
    
    const grossAmount = totalDutyAmount + vatAmount;
    const netPayable = grossAmount - aitAmount;
    
    form.setValue("vatAmount", vatAmount);
    form.setValue("aitAmount", aitAmount);
    form.setValue("grossAmount", grossAmount);
    form.setValue("netPayable", netPayable);
  };

  // Generate a bill number
  function generateBillNumber() {
    const now = new Date();
    const year = now.getFullYear();
    const month = String(now.getMonth() + 1).padStart(2, '0');
    const day = String(now.getDate()).padStart(2, '0');
    const randomPart = Math.floor(10000 + Math.random() * 90000);
    
    return `BILL-${year}${month}${day}-${randomPart}`;
  }

  // Handle duty selection
  const toggleDutySelection = (duty: ShipDuty) => {
    // Find employee name
    const employee = employees?.find(emp => emp.id === duty.employeeId);
    const employeeName = employee ? `${employee.firstName} ${employee.lastName}` : `Employee #${duty.employeeId}`;
    
    // Calculate amount
    const amount = Number(duty.dutyHours) * Number(duty.salaryRate);
    
    // Check if already selected
    const isSelected = selectedDuties.some(selectedDuty => selectedDuty.id === duty.id);
    
    if (isSelected) {
      // Remove from selection
      setSelectedDuties(selectedDuties.filter(selectedDuty => selectedDuty.id !== duty.id));
    } else {
      // Add to selection
      const dutyDetail: ShipDutyDetail = {
        id: duty.id,
        dutyDate: duty.dutyDate,
        employeeId: duty.employeeId,
        employeeName,
        vesselName: duty.vesselName,
        lighterName: duty.lighterName,
        dutyHours: Number(duty.dutyHours),
        salaryRate: Number(duty.salaryRate),
        conveyanceAmount: Number(duty.conveyanceAmount),
        amount
      };
      
      setSelectedDuties([...selectedDuties, dutyDetail]);
    }
  };

  // Format a date range for the bill period
  const getDateRangeForBill = () => {
    if (selectedDuties.length > 0) {
      const dates = selectedDuties.map(duty => new Date(duty.dutyDate));
      const minDate = new Date(Math.min(...dates.map(date => date.getTime())));
      const maxDate = new Date(Math.max(...dates.map(date => date.getTime())));
      
      form.setValue("startDate", minDate);
      form.setValue("endDate", maxDate);
      
      return { minDate, maxDate };
    }
    
    return null;
  };

  // Update date range when duties are selected
  useEffect(() => {
    getDateRangeForBill();
  }, [selectedDuties]);

  // Handle project selection
  const handleProjectChange = (projectId: string) => {
    const id = parseInt(projectId);
    setSelectedProjectId(id);
    form.setValue("projectId", id);
    
    // Find project and set client name
    const project = projects?.find(p => p.id === id);
    if (project) {
      form.setValue("clientName", project.clientName || "");
    }
    
    // Reset selected duties when project changes
    setSelectedDuties([]);
  };

  // Create mutation
  const createMutation = useMutation({
    mutationFn: async (data: InsertBill) => {
      const response = await apiRequest(
        "POST",
        "/api/bills",
        data
      );
      return response.json();
    },
    onSuccess: () => {
      toast({
        title: "Bill generated",
        description: "Bill has been generated successfully.",
      });
      queryClient.invalidateQueries({ queryKey: ["/api/bills"] });
      navigate("/bills");
    },
    onError: (error: Error) => {
      toast({
        title: "Error generating bill",
        description: error.message,
        variant: "destructive",
      });
    },
  });

  const onSubmit = (data: BillFormValues) => {
    if (selectedDuties.length === 0) {
      toast({
        title: "No duties selected",
        description: "Please select at least one duty to generate a bill.",
        variant: "destructive",
      });
      return;
    }
    
    createMutation.mutate(data);
  };

  return (
    <div className="container mx-auto py-10">
      <Card>
        <CardHeader>
          <CardTitle className="text-2xl font-bold">Generate New Bill</CardTitle>
          <CardDescription>
            Create a new bill from ship duty records to invoice clients.
          </CardDescription>
        </CardHeader>
        <CardContent>
          <Form {...form}>
            <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-6">
              <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
                {/* Bill Number */}
                <FormField
                  control={form.control}
                  name="billNumber"
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel>Bill Number</FormLabel>
                      <FormControl>
                        <Input {...field} readOnly className="bg-gray-50" />
                      </FormControl>
                      <FormDescription>
                        Automatically generated bill number
                      </FormDescription>
                      <FormMessage />
                    </FormItem>
                  )}
                />

                {/* Project Selection */}
                <FormField
                  control={form.control}
                  name="projectId"
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel>Project</FormLabel>
                      <Select
                        disabled={isLoadingProjects}
                        onValueChange={handleProjectChange}
                        defaultValue={field.value?.toString()}
                      >
                        <FormControl>
                          <SelectTrigger>
                            {isLoadingProjects ? (
                              <Loader2 className="h-4 w-4 animate-spin" />
                            ) : (
                              <SelectValue placeholder="Select a project" />
                            )}
                          </SelectTrigger>
                        </FormControl>
                        <SelectContent>
                          {projects?.map((project) => (
                            <SelectItem key={project.id} value={project.id.toString()}>
                              {project.name}
                            </SelectItem>
                          ))}
                        </SelectContent>
                      </Select>
                      <FormMessage />
                    </FormItem>
                  )}
                />

                {/* Client Name */}
                <FormField
                  control={form.control}
                  name="clientName"
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel>Client Name</FormLabel>
                      <FormControl>
                        <Input placeholder="Enter client name" {...field} />
                      </FormControl>
                      <FormMessage />
                    </FormItem>
                  )}
                />

                {/* Bill Date */}
                <FormField
                  control={form.control}
                  name="billDate"
                  render={({ field }) => (
                    <FormItem className="flex flex-col">
                      <FormLabel>Bill Date</FormLabel>
                      <Popover>
                        <PopoverTrigger asChild>
                          <FormControl>
                            <Button
                              variant={"outline"}
                              className={cn(
                                "w-full pl-3 text-left font-normal",
                                !field.value && "text-muted-foreground"
                              )}
                            >
                              {field.value ? (
                                format(field.value, "PPP")
                              ) : (
                                <span>Pick a date</span>
                              )}
                              <CalendarIcon className="ml-auto h-4 w-4 opacity-50" />
                            </Button>
                          </FormControl>
                        </PopoverTrigger>
                        <PopoverContent className="w-auto p-0" align="start">
                          <Calendar
                            mode="single"
                            selected={field.value}
                            onSelect={field.onChange}
                            disabled={(date) =>
                              date > new Date() || date < new Date("1900-01-01")
                            }
                            initialFocus
                          />
                        </PopoverContent>
                      </Popover>
                      <FormMessage />
                    </FormItem>
                  )}
                />

                {/* Start Date */}
                <FormField
                  control={form.control}
                  name="startDate"
                  render={({ field }) => (
                    <FormItem className="flex flex-col">
                      <FormLabel>Bill Period Start</FormLabel>
                      <Popover>
                        <PopoverTrigger asChild>
                          <FormControl>
                            <Button
                              variant={"outline"}
                              className={cn(
                                "w-full pl-3 text-left font-normal",
                                !field.value && "text-muted-foreground"
                              )}
                            >
                              {field.value ? (
                                format(field.value, "PPP")
                              ) : (
                                <span>Pick a date</span>
                              )}
                              <CalendarIcon className="ml-auto h-4 w-4 opacity-50" />
                            </Button>
                          </FormControl>
                        </PopoverTrigger>
                        <PopoverContent className="w-auto p-0" align="start">
                          <Calendar
                            mode="single"
                            selected={field.value}
                            onSelect={field.onChange}
                            disabled={(date) =>
                              date > new Date() || date < new Date("1900-01-01")
                            }
                            initialFocus
                          />
                        </PopoverContent>
                      </Popover>
                      <FormDescription>
                        Auto-set from selected duties
                      </FormDescription>
                      <FormMessage />
                    </FormItem>
                  )}
                />

                {/* End Date */}
                <FormField
                  control={form.control}
                  name="endDate"
                  render={({ field }) => (
                    <FormItem className="flex flex-col">
                      <FormLabel>Bill Period End</FormLabel>
                      <Popover>
                        <PopoverTrigger asChild>
                          <FormControl>
                            <Button
                              variant={"outline"}
                              className={cn(
                                "w-full pl-3 text-left font-normal",
                                !field.value && "text-muted-foreground"
                              )}
                            >
                              {field.value ? (
                                format(field.value, "PPP")
                              ) : (
                                <span>Pick a date</span>
                              )}
                              <CalendarIcon className="ml-auto h-4 w-4 opacity-50" />
                            </Button>
                          </FormControl>
                        </PopoverTrigger>
                        <PopoverContent className="w-auto p-0" align="start">
                          <Calendar
                            mode="single"
                            selected={field.value}
                            onSelect={field.onChange}
                            disabled={(date) =>
                              date > new Date() || date < new Date("1900-01-01")
                            }
                            initialFocus
                          />
                        </PopoverContent>
                      </Popover>
                      <FormDescription>
                        Auto-set from selected duties
                      </FormDescription>
                      <FormMessage />
                    </FormItem>
                  )}
                />

                {/* VAT Percentage */}
                <FormField
                  control={form.control}
                  name="vatPercentage"
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel>VAT Percentage (%)</FormLabel>
                      <FormControl>
                        <Input 
                          type="number" 
                          min="0" 
                          max="100" 
                          step="0.01" 
                          {...field} 
                          onChange={(e) => {
                            field.onChange(e);
                            // Allow time for the field to update
                            setTimeout(recalculateAmounts, 0);
                          }}
                        />
                      </FormControl>
                      <FormMessage />
                    </FormItem>
                  )}
                />

                {/* AIT Percentage */}
                <FormField
                  control={form.control}
                  name="aitPercentage"
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel>AIT Percentage (%)</FormLabel>
                      <FormControl>
                        <Input 
                          type="number" 
                          min="0" 
                          max="100" 
                          step="0.01" 
                          {...field} 
                          onChange={(e) => {
                            field.onChange(e);
                            // Allow time for the field to update
                            setTimeout(recalculateAmounts, 0);
                          }}
                        />
                      </FormControl>
                      <FormMessage />
                    </FormItem>
                  )}
                />

                {/* Total Duty Amount - Read Only */}
                <FormField
                  control={form.control}
                  name="totalDutyAmount"
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel>Total Duty Amount (৳)</FormLabel>
                      <FormControl>
                        <Input 
                          type="number" 
                          readOnly 
                          className="bg-gray-50" 
                          {...field} 
                          value={field.value.toFixed(2)}
                        />
                      </FormControl>
                      <FormMessage />
                    </FormItem>
                  )}
                />

                {/* Total Conveyance - Read Only */}
                <FormField
                  control={form.control}
                  name="totalConveyance"
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel>Total Conveyance (৳)</FormLabel>
                      <FormControl>
                        <Input 
                          type="number" 
                          readOnly 
                          className="bg-gray-50"
                          {...field} 
                          value={field.value.toFixed(2)}
                        />
                      </FormControl>
                      <FormMessage />
                    </FormItem>
                  )}
                />

                {/* VAT Amount - Read Only */}
                <FormField
                  control={form.control}
                  name="vatAmount"
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel>VAT Amount (৳)</FormLabel>
                      <FormControl>
                        <Input 
                          type="number" 
                          readOnly 
                          className="bg-gray-50"
                          {...field} 
                          value={field.value.toFixed(2)}
                        />
                      </FormControl>
                      <FormMessage />
                    </FormItem>
                  )}
                />

                {/* AIT Amount - Read Only */}
                <FormField
                  control={form.control}
                  name="aitAmount"
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel>AIT Amount (৳)</FormLabel>
                      <FormControl>
                        <Input 
                          type="number" 
                          readOnly 
                          className="bg-gray-50"
                          {...field} 
                          value={field.value.toFixed(2)}
                        />
                      </FormControl>
                      <FormMessage />
                    </FormItem>
                  )}
                />

                {/* Gross Amount - Read Only */}
                <FormField
                  control={form.control}
                  name="grossAmount"
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel>Gross Amount (৳)</FormLabel>
                      <FormControl>
                        <Input 
                          type="number" 
                          readOnly 
                          className="bg-gray-50"
                          {...field} 
                          value={field.value.toFixed(2)}
                        />
                      </FormControl>
                      <FormMessage />
                    </FormItem>
                  )}
                />

                {/* Net Payable - Read Only */}
                <FormField
                  control={form.control}
                  name="netPayable"
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel>Net Payable (৳)</FormLabel>
                      <FormControl>
                        <Input 
                          type="number" 
                          readOnly 
                          className="bg-gray-50 font-bold"
                          {...field} 
                          value={field.value.toFixed(2)}
                        />
                      </FormControl>
                      <FormMessage />
                    </FormItem>
                  )}
                />

                {/* Bill Status */}
                <FormField
                  control={form.control}
                  name="status"
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel>Bill Status</FormLabel>
                      <Select
                        onValueChange={field.onChange}
                        defaultValue={field.value}
                      >
                        <FormControl>
                          <SelectTrigger>
                            <SelectValue placeholder="Select status" />
                          </SelectTrigger>
                        </FormControl>
                        <SelectContent>
                          <SelectItem value="Draft">Draft</SelectItem>
                          <SelectItem value="Sent">Sent</SelectItem>
                          <SelectItem value="Paid">Paid</SelectItem>
                        </SelectContent>
                      </Select>
                      <FormMessage />
                    </FormItem>
                  )}
                />

                {/* Remarks */}
                <FormField
                  control={form.control}
                  name="remarks"
                  render={({ field }) => (
                    <FormItem className="col-span-3">
                      <FormLabel>Remarks (Optional)</FormLabel>
                      <FormControl>
                        <Textarea
                          placeholder="Enter any additional notes or remarks"
                          className="resize-none"
                          {...field}
                        />
                      </FormControl>
                      <FormMessage />
                    </FormItem>
                  )}
                />
              </div>

              {/* Ship Duty Selection Section */}
              <div className="mt-8">
                <h3 className="text-lg font-semibold mb-4">Select Ship Duties for This Bill</h3>
                
                {isLoadingDuties ? (
                  <div className="flex items-center justify-center h-64">
                    <Loader2 className="h-8 w-8 animate-spin text-primary" />
                  </div>
                ) : selectedProjectId === null ? (
                  <div className="border rounded-md p-6 flex items-center justify-center h-40 bg-gray-50">
                    <p className="text-muted-foreground">Please select a project to view available duties</p>
                  </div>
                ) : filteredDuties.length === 0 ? (
                  <div className="border rounded-md p-6 flex items-center justify-center h-40 bg-gray-50">
                    <p className="text-muted-foreground">No ship duties found for this project</p>
                  </div>
                ) : (
                  <div className="border rounded-md">
                    <Table>
                      <TableHeader>
                        <TableRow>
                          <TableHead className="w-[50px]">Select</TableHead>
                          <TableHead>Duty Date</TableHead>
                          <TableHead>Vessel Name</TableHead>
                          <TableHead>Lighter Name</TableHead>
                          <TableHead>Duty Hours</TableHead>
                          <TableHead>Salary Rate</TableHead>
                          <TableHead>Conveyance</TableHead>
                          <TableHead>Amount</TableHead>
                        </TableRow>
                      </TableHeader>
                      <TableBody>
                        {filteredDuties.map((duty) => {
                          const isSelected = selectedDuties.some(
                            selectedDuty => selectedDuty.id === duty.id
                          );
                          const amount = Number(duty.dutyHours) * Number(duty.salaryRate);
                          
                          return (
                            <TableRow key={duty.id} className={isSelected ? "bg-blue-50" : ""}>
                              <TableCell>
                                <Checkbox
                                  checked={isSelected}
                                  onCheckedChange={() => toggleDutySelection(duty)}
                                />
                              </TableCell>
                              <TableCell>
                                {format(new Date(duty.dutyDate), "MMM dd, yyyy")}
                              </TableCell>
                              <TableCell>{duty.vesselName}</TableCell>
                              <TableCell>{duty.lighterName || "—"}</TableCell>
                              <TableCell>{duty.dutyHours}</TableCell>
                              <TableCell>৳{Number(duty.salaryRate).toFixed(2)}</TableCell>
                              <TableCell>৳{Number(duty.conveyanceAmount).toFixed(2)}</TableCell>
                              <TableCell>৳{amount.toFixed(2)}</TableCell>
                            </TableRow>
                          );
                        })}
                      </TableBody>
                    </Table>
                  </div>
                )}

                {/* Selected Duties Summary */}
                {selectedDuties.length > 0 && (
                  <div className="mt-6">
                    <h4 className="font-medium mb-2">Selected Duties: {selectedDuties.length}</h4>
                    <p className="text-sm text-muted-foreground">
                      Total Amount: ৳{selectedDuties.reduce((sum, duty) => sum + duty.amount, 0).toFixed(2)} | 
                      Total Conveyance: ৳{selectedDuties.reduce((sum, duty) => sum + duty.conveyanceAmount, 0).toFixed(2)}
                    </p>
                  </div>
                )}
              </div>

              <div className="flex justify-end space-x-4 mt-8">
                <Button
                  type="button"
                  variant="outline"
                  onClick={() => navigate("/bills")}
                >
                  Cancel
                </Button>
                <Button 
                  type="submit"
                  disabled={createMutation.isPending || selectedDuties.length === 0}
                >
                  {createMutation.isPending ? (
                    <>
                      <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                      Generating...
                    </>
                  ) : (
                    "Generate Bill"
                  )}
                </Button>
              </div>
            </form>
          </Form>
        </CardContent>
      </Card>
    </div>
  );
}