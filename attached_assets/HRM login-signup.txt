You can use these following codes as assistant, to make aoo more flexible, 
user friendly and stability you can either follow or modify or generate new.

Login/Signup Page (HTML + JS Example using Express/Node & TailwindCSS)

<!-- public/login.html -->
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>Login</title>
  <script defer src="/auth.js"></script>
  <link href="https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css" rel="stylesheet">
</head>
<body class="bg-gray-100 flex items-center justify-center min-h-screen">
  <form id="loginForm" class="bg-white p-6 rounded shadow-md w-96">
    <h2 class="text-xl font-bold mb-4">Login</h2>
    <input name="email" type="email" placeholder="Email" required class="mb-2 p-2 border w-full" />
    <input name="password" type="password" placeholder="Password" required class="mb-2 p-2 border w-full" />
    <button type="submit" class="bg-blue-500 text-white px-4 py-2 rounded">Login</button>
    <p class="mt-2 text-sm">Don't have an account? <a href="/signup.html" class="text-blue-500">Signup</a></p>
  </form>
</body>
</html>



auth.js (Handle login/signup and redirect)

// public/auth.js
document.getElementById('loginForm')?.addEventListener('submit', async (e) => {
  e.preventDefault();
  const formData = new FormData(e.target);
  const res = await fetch('/api/login', {
    method: 'POST',
    body: new URLSearchParams(formData),
  });
  const data = await res.json();
  if (data.success) {
    window.location.href = '/dashboard.html'; // smooth redirect
  } else {
    alert(data.message || "Login failed");
  }
});



Sample Users (Seed Data Example)

// Use this to insert users to your DB initially
[
  {
    userId: "admin001",
    email: "admin@example.com",
    password: "admin123", // hashed in actual DB
    role: "admin"
  },
  {
    userId: "hr002",
    email: "hr@example.com",
    password: "hr1234",
    role: "hr"
  },
  {
    userId: "view003",
    email: "viewer@example.com",
    password: "view789",
    role: "viewer"
  }
]



Smooth Redirect After Login
Ensure that on successful login, your backend session/token logic responds like this:

// Example Express POST /api/login
app.post('/api/login', async (req, res) => {
  const { email, password } = req.body;
  const user = await findUserByEmail(email);
  if (!user || !(await comparePasswords(password, user.password))) {
    return res.json({ success: false, message: "Invalid credentials" });
  }

  // Set session/cookie/token logic here
  req.session.user = { id: user.userId, role: user.role };

  res.json({ success: true });
});
